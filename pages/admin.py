import streamlit as st
st.set_page_config(layout="wide")
st.markdown("""
<style>
#MainMenu, footer {visibility:hidden;}
[data-testid="stSidebar"]{display:none!important;}
</style>""", unsafe_allow_html=True)

import os, io, requests, pickle
import numpy as np
from PIL import Image
from tensorflow.keras.applications.efficientnet import EfficientNetB4
from tensorflow.keras.layers import GlobalAveragePooling2D
from tensorflow.keras.models import Model
import faiss
from concurrent.futures import ThreadPoolExecutor
import streamlit_authenticator as stauth

import db_utils
from embedding_utils import get_efficientnet_embedding, compute_md5

WC_URL    = "http://falconshop.uz"
WC_KEY    = "ck_388ecbd01de0652b609efc141133e9ebf413a5ca"
WC_SECRET = "cs_96b9ce33f3cf1bd3d1cbbdd51dabbe84780ee868"

hashed = stauth.Hasher(["12345"]).generate()
auth = stauth.Authenticate(
    {"usernames": {"admin": {"name": "Admin", "password": hashed[0]}}},
    "cookie", "admin_key", 30
)

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DATA_FOLDER = os.path.join(PROJECT_DIR, "data")
os.makedirs(DATA_FOLDER, exist_ok=True)
ALLOWED_EXT = {".jpg", ".jpeg", ".png", ".webp", ".bmp"}

@st.cache_resource(show_spinner=False)
def build_extractor():
    base = EfficientNetB4(weights="imagenet", include_top=False)
    return Model(base.input, GlobalAveragePooling2D()(base.output))
extractor = build_extractor()

def get_emb(pil):
    return get_efficientnet_embedding(pil, extractor)

def fetch_products(page=1, per_page=100):
    r = requests.get(f"{WC_URL}/wp-json/wc/v3/products",
                     params={"page": page, "per_page": per_page, "status": "publish"},
                     auth=(WC_KEY, WC_SECRET), timeout=20)
    r.raise_for_status()
    return r.json()

def purge_missing():
    removed = 0
    for img_id, fpath, *_ in db_utils.get_all_images():
        if not os.path.exists(fpath):
            db_utils.delete_image(img_id, remove_file=True)
            removed += 1
    if removed:
        st.info(f"–£–¥–∞–ª–µ–Ω–æ {removed} –±–∏—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π")

def build_faiss_index():
    vectors = []
    id_map = []
    updated = 0
    for row in db_utils.get_all_images():
        img_id, fname, link, title, pid, *_ = row
        if not os.path.exists(fname):
            continue
        try:
            pil = Image.open(fname).convert("RGB")
            emb = get_emb(pil)
            db_utils.update_image_embedding(img_id, emb)
            vectors.append(emb.astype("float32"))
            id_map.append((img_id, fname, link, title, pid))
            updated += 1
        except Exception as e:
            st.warning(f"–û—à–∏–±–∫–∞ {fname}: {e}")

    if vectors:
        dim = len(vectors[0])
        index = faiss.IndexHNSWFlat(dim, 32)
        index.hnsw.efConstruction = 40
        faiss.normalize_L2(np.array(vectors))
        index.add(np.array(vectors))

        faiss.write_index(index, os.path.join(DATA_FOLDER, "efficientnet_index.faiss"))
        with open(os.path.join(DATA_FOLDER, "efficientnet_meta.pkl"), "wb") as f:
            pickle.dump(id_map, f)

        st.success(f"FAISS-–∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω: {len(vectors)} –æ–±—ä–µ–∫—Ç–æ–≤")
    else:
        st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
    st.success(f"–ü–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {updated}")
    st.rerun()

def sync_woo():
    with st.spinner("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è WooCommerce‚Ä¶"):
        added = updated = skipped = 0
        page = 1
        all_tasks = []

        def process_product_image(pid, sku, link, title, idx, img):
            try:
                img_url = img["src"]
                is_primary = 1 if idx == 0 else 0
                rec_id = db_utils.exists_photo(pid, idx)
                resp = requests.get(img_url, timeout=15)
                if "image" not in resp.headers.get("Content-Type", "") or len(resp.content) < 1024:
                    return None
                pil = Image.open(io.BytesIO(resp.content)).convert("RGB")
                fname = f"woo_{pid}_{idx}.jpg"
                fpath = os.path.join(DATA_FOLDER, fname)

                new_hash = compute_md5(pil)
                if os.path.exists(fpath):
                    try:
                        existing = Image.open(fpath)
                        if compute_md5(existing) == new_hash:
                            return None
                    except:
                        pass

                pil.save(fpath)
                emb = get_emb(pil)

                return (rec_id, fpath, emb, link, title, sku, pid, idx, is_primary)
            except:
                return None

        try:
            while True:
                prods = fetch_products(page)
                if not prods:
                    break
                for p in prods:
                    pid, sku, link, title = p["id"], p["sku"] or "", p["permalink"], p["name"]
                    if not p["images"]:
                        continue
                    for idx, img in enumerate(p["images"]):
                        all_tasks.append((pid, sku, link, title, idx, img))
                page += 1

            with ThreadPoolExecutor(max_workers=10) as executor:
                results = list(executor.map(lambda args: process_product_image(*args), all_tasks))

            for res in results:
                if not res:
                    skipped += 1
                    continue
                rec_id, fpath, emb, link, title, sku, pid, idx, is_primary = res
                if rec_id:
                    db_utils.update_photo(rec_id, link, title, sku, is_primary, emb_np=emb, filename=fpath)
                    updated += 1
                else:
                    db_utils.insert_image(fpath, link, emb, title, pid, sku, is_primary, idx)
                    added += 1

            build_faiss_index()

        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return

        st.success(f"–ì–æ—Ç–æ–≤–æ: –Ω–æ–≤—ã—Ö {added}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {updated}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped}.")
        st.rerun()

def main():
    name, ok, _ = auth.login("–í—Ö–æ–¥", "main")
    if ok is False: st.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"); return
    if ok is None: st.warning("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω/–ø–∞—Ä–æ–ª—å"); return

    auth.logout("–í—ã–π—Ç–∏", "sidebar")
    st.sidebar.success(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}")
    st.title("Admin –ø–∞–Ω–µ–ª—å")

    purge_missing()

    if st.button("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å WooCommerce"):
        sync_woo()

    if st.button("üîÅ –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏ —Å–æ–∑–¥–∞—Ç—å FAISS‚Äë–∏–Ω–¥–µ–∫—Å"):
        build_faiss_index()

    st.markdown("### üì• –†—É—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    st.markdown("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–Ω–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–º –¥–ª—è —Ç–æ–≤–∞—Ä–∞.")

    uploaded_files = st.file_uploader(
        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG / PNG)", 
        type=["jpg", "jpeg", "png"], 
        accept_multiple_files=True,
        key="upload_new"
    )

    new_link  = st.text_input("–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä", key="–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä")
    new_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", key="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")
    new_sku   = st.text_input("SKU —Ç–æ–≤–∞—Ä–∞", key="SKU —Ç–æ–≤–∞—Ä–∞")

    if uploaded_files and st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"):
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ product_id
            existing_ids = [r[4] for r in db_utils.get_all_images() if r[4] is not None]
            new_product_id = max(existing_ids, default=100000) + 1

            for i, uploaded_file in enumerate(uploaded_files):
                pil = Image.open(uploaded_file).convert("RGB")
                fname = f"manual_{new_sku or new_title.replace(' ', '_')}_{np.random.randint(10000)}.jpg"
                fpath = os.path.join(DATA_FOLDER, fname)
                pil.save(fpath)

                emb = get_emb(pil)

                db_utils.insert_image(
                    path=fpath,
                    link=new_link,
                    emb_np=emb,
                    title=new_title,
                    product_id=new_product_id,
                    product_sku=new_sku,
                    is_primary=1 if i == 0 else 0,
                    photo_idx=i
                )

            st.success("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            st.rerun()

            st.session_state["upload_new"] = None
            st.session_state["–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä"] = ""
            st.session_state["–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"] = ""
            st.session_state["SKU —Ç–æ–≤–∞—Ä–∞"] = ""

            st.rerun()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞: {e}")

    all_rows = db_utils.get_all_images()
    st.markdown(f"**–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** {len(all_rows)}")
    unique_pids = len(set(row[4] for row in all_rows if row[4]))
    st.markdown(f"**–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:** {unique_pids}")

    mode = st.selectbox("–§–∏–ª—å—Ç—Ä –ø–æ", ["–í—Å–µ", "SKU", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Å—ã–ª–∫–∞"])
    q = st.text_input("–ü–æ–∏—Å–∫").strip().lower()

    def filt(r):
        _, _, link, title, _, sku, *_ = r
        if mode == "–í—Å–µ" or not q: return True
        if mode == "SKU":       return q in (sku   or "").lower()
        if mode == "–ù–∞–∑–≤–∞–Ω–∏–µ":  return q in (title or "").lower()
        if mode == "–°—Å—ã–ª–∫–∞":    return q in (link  or "").lower()
        return True

    filtered = list(filter(filt, all_rows))
    grouped = {}
    for row in filtered:
        pid = row[4]
        grouped.setdefault(pid, []).append(row)

    for idx, (pid, images) in enumerate(grouped.items(), start=1):
        images.sort(key=lambda x: (x[6] != 0, x[6]))  # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ is_primary, –∑–∞—Ç–µ–º –ø–æ photo_idx
        st.markdown(f"---\n### ‚Ññ{idx}")

        col_del = st.columns([1, 5])[0]
        if col_del.button("üóë –£–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —Ç–æ–≤–∞—Ä", key=f"del_product_{pid}"):
            db_utils.delete_by_product_id(pid)
            st.success(f"–£–¥–∞–ª–µ–Ω–æ –≤—Å—ë –ø–æ product_id {pid}")
            st.rerun()

        for pos, (img_id, fname, link, title, pid, sku, idx_, is_pr, emb) in enumerate(images):
            cols = st.columns([1, 3, 3, 2, 1])
            with cols[0]:
                st.image(fname, width=70)
            with cols[1]:
                new_link = st.text_input("–°—Å—ã–ª–∫–∞", link or "", key=f"L{img_id}")
                new_sku = st.text_input("SKU", sku or "", key=f"S{img_id}")
                if st.button("üíæ", key=f"upd_link_sku_{img_id}"):
                    db_utils.update_link(img_id, new_link)
                    db_utils.update_sku(img_id, new_sku)
                    st.rerun()
            with cols[2]:
                new_title = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ", title or "", key=f"T{img_id}")
                if st.button("üíæ ", key=f"upd_title_{img_id}"):
                    db_utils.update_title(img_id, new_title)
                    st.rerun()
            with cols[3]:
                confirm = f"confirm_{img_id}"
                if st.button("üóëÔ∏è", key=f"del_{img_id}"):
                    st.session_state[confirm] = True
                if st.session_state.get(confirm):
                    col_y, col_n = st.columns(2)
                    if col_y.button("‚úÖ", key=f"yes_{img_id}"):
                        db_utils.delete_image(img_id, remove_file=True)
                        st.session_state.pop(confirm); st.rerun()
                    if col_n.button("‚ùå", key=f"no_{img_id}"):
                        st.session_state.pop(confirm); st.rerun()

if __name__ == "__main__":
    main()